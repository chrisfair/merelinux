#!/bin/sh

# Status states:
#   up       - Supervised and currently running.
#   down     - Supervised but not currently running.
#   unknown  - Not supervised.
#
# OnBoot states:
#   enabled  - Starts at boot. Defined in AVAIL_DIR and in ENABL_DIR.
#   disabled - Does not start at boot. Defined only in AVAIL_DIR.

# SCAN_DIR   - The directory of supervised services, monitored by s6-svscan.
# AVAIL_DIR  - The directory of installed definitions of services.
# ENABL_DIR  - The directory that is used at boot time for launching services,
#                typically containing symlinks to services in AVAIL_DIR.

SCAN_DIR=/run/service
AVAIL_DIR=/etc/s6/services/available
ENABL_DIR=/etc/s6/services/enabled

usage() {
    printf "
  Usage:
    %s list
    %s <service_name> [command]

  Commands:
    enable   Enables a service to start at boot
    disable  Disables a service from starting at boot
    start    Attempt to start a service
    stop     Attempt to stop a service
    status   Show status of a service
    reload   Signal the service to reload its configuration
    restart  Terminate and restart a service

" "$0" "$0"
    exit 1
}

check() {
    if [ "$1" -eq 0 ] ; then
        printf " OK\n"
        return 0
    else
        printf " FAIL\n"
        return 1
    fi
}

is_supervised() {
    if ! s6-svok "$svcdir"; then
        printf "%s is not a supervised service\n" "$svc"
        return 1
    fi
}

short_status() {
    s6-svstat -n "${SCAN_DIR}/${1}" 2>/dev/null | cut -d' ' -f1
}


if [ "$1" = "list" ] ; then
    LIST="Service Status OnBoot ~~~~~~~~ ~~~~~~~~ ~~~~~~~~ "
    for dir in $(find ${AVAIL_DIR} -type d -mindepth 1 -maxdepth 1 | sort | xargs) ; do
        bn=${dir##*/}
        LIST="$LIST ${bn} "
        case $(short_status "$bn") in
            up)   LIST="$LIST up ";;
            down) LIST="$LIST down ";;
            *)    LIST="$LIST unknown ";;
        esac
        if [ -e "${ENABL_DIR}/${bn}" ] ; then
            LIST="$LIST enabled "
        else
            LIST="$LIST disabled "
        fi
    done
    printf "\n"
    # shellcheck disable=SC2183,SC2086
    printf "%-20s%-20s%s\n" $LIST
    printf "\n"
    exit 0
else
	[ $# -ne 2 ] && usage
    case "$2" in
        enable|disable|start|stop|status|reload|restart)
            svc=$1
            act=$2
            svcdir="${SCAN_DIR}/${svc}"
            export svc act svcdir
            ;;
        *) usage ;;
    esac
fi

if [ ! -x "${AVAIL_DIR}/${svc}/run" ] ; then
    printf "%s is not an available service\n" "$svc"
    exit 1
fi

case "$act" in
    enable)
        printf "Enabling %s..." "$svc"
        (
            set -e
            rm -rf "${ENABL_DIR:?}/${svc:?}"
            ln -s "../available/${svc}" "$ENABL_DIR"
        )
        check $?
        ;;

    disable)
        printf "Disabling %s..." "$svc"
        (
            set -e
            rm -f "${ENABL_DIR}/${svc}"
            if s6-svok "$svcdir" && [ "$(short_status "$svc")" != 'up' ] ; then
                $0 "$svc" stop >/dev/null || true
                rm -rf "$svcdir"
                s6-svscanctl -an "$SCAN_DIR"
            fi
        )
        check $?
        ;;

    start)
        printf "Starting %s..." "$svc"
        if s6-svok "$svcdir" ; then
            (
                set -e
                s6-svc -u "$svcdir"
                s6-svok "${svcdir}/log" && s6-svc -u "${svcdir}/log"
            )
        else
            (
                set -e
                [ -d "$svcdir" ] || cp -a "${AVAIL_DIR}/${svc}" "$SCAN_DIR"
                s6-svscanctl -a "$SCAN_DIR"
            )
        fi
        check $?
        ;;

    stop)
        is_supervised || exit 1
        printf "Stopping %s..." "$svc"
        (
            set -e
            s6-svc -wd -d -T 10000 "$svcdir" 2>/dev/null
            s6-svok "${svcdir}/log" && s6-svc -d "${svcdir}/log"
        )
        check $?
        ;;

    status)
        is_supervised || exit 1
        s6-svstat -n "$svcdir"
        ;;

    reload)
        is_supervised || exit 1
        printf "Reloading %s..." "$svc"
        s6-svc -h "$svcdir"
        check $?
        ;;

    restart)
        is_supervised || exit 1
        printf "Restarting %s..." "$svc"
        if [ -x "${svcdir}/restart" ] ; then
            "${svcdir}/restart"
        else
            (
                set -e
                s6-svc -wd -d "$svcdir"
                s6-svc -u "$svcdir"
            )
        fi
        check $?
        ;;
esac
