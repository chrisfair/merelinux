#!/bin/sh -e
. /lib/s6/service_functions.sh

# SVCS_DIR is the top-level services directory. i.e., /run/services
# svcdir is the service-specific service directory. i.e., /run/services/svc
# AVAIL_DIR is the directory containing configured services
# ENABL_DIR is a directory containing symlinks to available services which
# should be considered 'enabled'.

check_args $@
case "$act" in
    enable)
        if is_service ; then
            message="Enabling ${svc}... "
            printf "%s" "$message"
            ln -sf "../available/${svc}" ${ENABL_DIR}
            if [ ! -d $svcdir ] ; then
                cp -a "${AVAIL_DIR}/${svc}" "${SVCS_DIR}"
            fi
            s6-svscanctl -a ${SVCS_DIR}
            display_ok "$message"
        else
            display_fail "$message"
        fi
        ;;
    disable)
        # This intentionally doesn't care if the service is properly configured
        $0 ${svc} stop || true
        message="Disabling ${svc}... "
        printf "%s" "$message"
        if (
            rm -f "${ENABL_DIR}/${svc}"
            rm -rf ${svcdir}
            s6-svscanctl -an ${SVCS_DIR}
        ) ; then
            display_ok "$message"
        else
            display_fail "$message"
        fi
        ;;
    start)
        is_supervised || exit 1
        message="Starting ${svc}... "
        run_cmd "s6-svc -u ${svcdir}"
        ;;
    stop)
        is_supervised || exit 1
        message="Stopping ${svc}... "
        run_cmd "s6-svc -d ${svcdir}"
        ;;
    status)
        is_supervised || exit 1
        s6-svstat -n "${svcdir}"
        ;;
    reload)
        is_supervised || exit 1
        message="Reloading ${svc}... "
        run_cmd "s6-svc -h ${svcdir}"
        ;;
    restart)
        if [ -x "${svcdir}/restart" ] ; then
            "${svcdir}/restart"
        else
            $0 $svc stop
            sleep 1
            $0 $svc start
        fi
        ;;
esac
